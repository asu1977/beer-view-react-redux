import R from 'ramda'

export const getItemById = (state, id) => R.prop(id, state.items)

export const getItems = (state, ownProps) => {
    const actioveCategoryId = getActiveCategoryId(ownProps)
    const applySearch = item => R.contains(
        state.itemsPage.search,
        R.prop('name', item)
    )
    const applyCategory = item => R.equals(
        actioveCategoryId,
        R.prop('categoryId', item)
    )

    const items = R.compose(
        R.filter(applySearch),
        R.when(R.always(actioveCategoryId), R.filter(applyCategory)),
        R.map(id => getItemById(state, id))
    )(state.itemsPage.ids)

    return items
}

export const getRenderedItemsLength = state => R.length(state.itemsPage.ids)

export const getTotalBasketCount = state => R.length(state.list)

export const getTotalListPrice = state => {
    const totalPrice = R.compose(
        R.sum,
        R.pluck('price'),
        R.map(id => getItemById(state, id))
    )(state.list)

    return totalPrice
}

export const getCategories = state => R.values(state.categories)

export const getActiveCategoryId = ownProps => R.path(['params', 'id'], ownProps)

export const getListItemsWithCount = state => {
    const uniqueIds = R.uniq(state.list)
    const itemCount = id => R.compose(
        R.length,
        R.filter(listId => R.equals(id, listId))
    )(state.list)
    const itemWithCount = item => R.assoc('count', itemCount(item.id), item)
    const items = R.compose(
        R.map(itemWithCount),
        R.map(id => getItemById(state, id))
    )(uniqueIds)
    return items
}